Info : Pour gérer le déplacement, créer une copie de travail (définir une méthode réalisant cela par une double boucle for), effectuer l'aglo d'avant dessus,
et si on obtient 'aBouge == true', alors on remplace tableau[coupaActuel] par la copie de travail (définir une méthode pour cela ?)
--> pas besoin de trop modifier les deplGauche/Droite/etc.
--> faire une gestion dynamique de la copie de travail (new dans la méthode de copie, delete dans la méthode de remplacement)


Info : une pénalité de 16 points est appliquée à chaque Undo effectué par le joueur, pour éviter la triche

Info : Le code QML concernant le texte de gameover se situe dans main.qml pour pouvoir conserver le MainForm.ui.qml éditable graphiquement

Info : La coloration d'une case de fait en utilisant le log en base 2 de la valeur de la case, qui renvoie l'indice ou aller chercher la
couleur à utiliser dans couleurs[couleurActuelle] : 2 renvoie 0, 4 renvoie 1, etc.

Info : Les boutons sont actifs ou non en fonction selon l'état du GameOver : quand la partie est perdue, New Game, Undo et Swap Color sont
désactivés, tandis que Try Again et Quit s'activent

Bug : revoir le GameOver, qui se déclenche parfois au mauvais moment, ou qui ne se déclenche parfois pas (voire jamais ?)

Bug : quand on joue trop vite, deux cases spawnent au meme endroit à la suite
==> Fixed

TODO : rajouter un moyen de vérifier quand coupActuel est trop proche de maxUndo, pour rajouter des cases au tableau (si on dépasse
maxUndo avec coupActuel)

TODO : changer la couleur du texte pour qu'elle soit toujours opposée au fond de la cellule

TODO : créer un fichier Bouton.qml pour gérer les boutons proprement

TODO : gestion des sauvegardes

TODO : gestion éventuelle de l'historique des directions des coups joués, pour que le Undo fonctionne mieux

TODO : gérer dynamiquement la taille du texte des cellules, pour la diminuers quand leur valeur augmente
(simplifier la tache en créant une fonction liant le texte à la taille, au lieu d'avoir une boucle for par exemple)
